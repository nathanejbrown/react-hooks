{"ast":null,"code":"import _slicedToArray from \"/Users/Nathan/udemy/React-Course/hooks-02-hooks-enabled/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Nathan/udemy/React-Course/hooks-02-hooks-enabled/src/Components/Todo.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar todo = function todo(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      todoName = _useState2[0],\n      setTodoName = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todoList = _useState4[0],\n      setTodoList = _useState4[1]; // const [todoState, setTodoState] = useState({userInput: '', todoList: []})\n  // the empty array passed as the second argument tells it to only run this function when the component mounts. If you want to run the api call when something changes, pass that variable into the array and it will listen for changes. \n  // The return statement in the first argument specifies what to do when the component unmounts. \n\n\n  useEffect(function () {\n    axios.get('https://hooks-testing.firebaseio.com/todos.json').then(function (res) {\n      console.log(res);\n      var todoData = res.data;\n      var todos = [];\n\n      for (var key in todoData) {\n        todos.push({\n          id: key,\n          name: todoData[key].name\n        });\n      }\n\n      setTodoList(todos);\n    });\n    return function () {\n      console.log('Cleanup');\n    };\n  }, [todoName]);\n\n  var mouseMoveHandler = function mouseMoveHandler(event) {\n    console.log(event.clientX, event.clientY);\n  };\n\n  useEffect(function () {\n    document.addEventListener('mousemove', mouseMoveHandler);\n  });\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    setTodoName(event.target.value); // setTodoState({userInput: event.target.value, todoList: todoState.todoList})\n  };\n\n  var todoAddHandler = function todoAddHandler() {\n    setTodoList(todoList.concat(todoName));\n    axios.post('https://hooks-testing.firebaseio.com/todos.json', {\n      name: todoName\n    }).then(function (res) {\n      console.log(res);\n    }).catch(function (err) {\n      console.log(err);\n    }); // setTodoState({userInput: todoState.userInput, todoList: todoState.todoList.concat(todoState.userInput)});\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"todo\",\n    onChange: inputChangeHandler,\n    value: todoName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: todoAddHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, todoList.map(function (todo, i) {\n    return React.createElement(\"li\", {\n      key: todo.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, todo.name);\n  })));\n};\n\nexport default todo;","map":{"version":3,"sources":["/Users/Nathan/udemy/React-Course/hooks-02-hooks-enabled/src/Components/Todo.js"],"names":["React","Fragment","useState","useEffect","axios","todo","props","todoName","setTodoName","todoList","setTodoList","get","then","res","console","log","todoData","data","todos","key","push","id","name","mouseMoveHandler","event","clientX","clientY","document","addEventListener","inputChangeHandler","target","value","todoAddHandler","concat","post","catch","err","map","i"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst todo = props => {\n    const [todoName, setTodoName] = useState('');\n    const [todoList, setTodoList] = useState([]);\n    // const [todoState, setTodoState] = useState({userInput: '', todoList: []})\n\n    // the empty array passed as the second argument tells it to only run this function when the component mounts. If you want to run the api call when something changes, pass that variable into the array and it will listen for changes. \n\n    // The return statement in the first argument specifies what to do when the component unmounts. \n    useEffect(() => {\n        axios.get('https://hooks-testing.firebaseio.com/todos.json').then(res => {\n            console.log(res);\n            const todoData = res.data;\n            const todos = [];\n            for (let key in todoData) {\n                todos.push({id: key, name: todoData[key].name})\n            }\n            setTodoList(todos);\n        });\n        return () => {\n            console.log('Cleanup');\n        };\n    }, [todoName]);\n\n    const mouseMoveHandler = event => {\n        console.log(event.clientX, event.clientY);\n    }\n\n    useEffect(() => {\n        document.addEventListener('mousemove', mouseMoveHandler);\n    })\n\n    const inputChangeHandler = event => {\n        setTodoName(event.target.value);\n        // setTodoState({userInput: event.target.value, todoList: todoState.todoList})\n    }\n\n    const todoAddHandler = () => {\n        setTodoList(todoList.concat(todoName));\n        axios.post('https://hooks-testing.firebaseio.com/todos.json', {name: todoName})\n            .then(res => {\n                console.log(res);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        // setTodoState({userInput: todoState.userInput, todoList: todoState.todoList.concat(todoState.userInput)});\n    }\n\n    return (\n        <Fragment>\n            <input \n            type='text' \n            placeholder='todo' \n            onChange={inputChangeHandler} \n            value={todoName} \n            />\n            <button type='button' onClick={todoAddHandler}>Add</button>\n            <ul>\n                {todoList.map((todo, i) => (<li key={todo.id}>{todo.name}</li>))}\n            </ul>\n        </Fragment>\n    )\n}\n\nexport default todo;"]},"metadata":{},"sourceType":"module"}